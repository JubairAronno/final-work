Kruskal's MST Code:

#include<bits/stdc++.h>
using namespace std;

struct Edge {
    int u, v, w;
};

// DSU
// find function
int findParent(int x, vector<int>& parent) {
    if (parent[x] == x)
        return x;
    return findParent(parent[x], parent);
}

void unionSet(int u, int v, vector<int>& parent) {
    int pu = findParent(u, parent);
    int pv = findParent(v, parent);
    parent[pv] = pu;
}

bool compare(Edge a, Edge b) {
    return a.w < b.w;
}

int kruskal(int n, vector<Edge>& edges) {
    sort(edges.begin(), edges.end(), compare);
    vector<int> parent(n);

    for (int i=0; i<n; i++)
        parent[i] = i;

    int totalCost = 0;

    for (auto& edge:edges) {
        int s1 = findParent(edge.u, parent);
        int s2 = findParent(edge.v, parent);
        if (s1!=s2) {
            unionSet(s1, s2, parent);
            totalCost += edge.w;
            cout << edge.u << " -> " << edge.v << ": " << edge.w << endl;
        }
    }
    return totalCost;
}

int main() {

    int n, e;
    cout << "Enter no. of vertices and edges: ";
    cin >> n >> e;

    vector<Edge> edges(e);

    for (int i=0; i<e; i++) {
        cout << "Enter source: ";
        cin >> edges[i].u;
        cout << "Enter destination: ";
        cin >> edges[i].v;
        cout << "Enter weight: ";
        cin >> edges[i].w;
    }

    int totalCost = kruskal(n, edges);

    cout << totalCost << endl;

    return 0;
}